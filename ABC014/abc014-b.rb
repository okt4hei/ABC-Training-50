# https://atcoder.jp/contests/abc014/tasks/abc014_2
# あなたは買い物をしていて，商品リストからいくつかの商品を選んだ．そして今，その商品の価格を合計しようとしている．
# ところで，とある集合の任意の部分集合を 2 進数を用いて表す方法が存在し，forループで全ての部分集合(組み合わせ)を列挙する際などに用いることができる．
# n 個の商品があり， 商品0,商品1,..,商品n−1 があるとする．添字が 0から始まることに注意せよ．
# 部分集合を表す 10 進整数を X とし，その 2 進 n 桁表現をbn−1​bn−2​...b1​b0​とする．b0​ が最下位ビットで bn−1​ が最上位ビットである．先頭の 0 を許す表現であることに注意せよ．

# そして，この整数 X の 2 進表現を用いて，ある部分集合を以下のように定義する．
# b0​=1 ならば集合は商品0 を含み，b0​=0 ならば集合は商品 0 を含まない．
# b1​=1 ならば集合は商品1 を含み，b1​=0 ならば集合は商品 1 を含まない．
# ...
# bn−1​=1 ならば集合は商品 n−1 を含み，bn−1​=0 ならば集合は商品 n−1 を含まない．

# 例えば，
# n=4,X=5 のとき， b=0101 であり，部分集合は {商品0,商品2} である．
# 簡単にいえば，Xの 2 進表現において，k(0≦k≦n−1) 番目のビットが立っていれば k 番目のアイテムを含むということである．
# あるビットが立っているかどうかは，多くのプログラミング言語で容易に判定できるので，各自調べられたい．
# あなたの仕事は，商品の数，それぞれの商品の価格，そして部分集合を表す 10 進整数 X が与えられるので，部分集合に含まれる商品の価格を合計することである．
# ※今回の問題には直接関係は無いが，部分集合を上記のように表現することで，大きさ
# n の集合の全ての部分集合(空集合を含む)を0 ～ 2n−1 の連続した整数で表現できるので，全列挙を行う際には応用するとよい．
# 入力
# 入力は以下の形式で標準入力から与えられる。
# n X
# a0​ a1​ a2​ ... an−1​

# 1 行目には，商品の数 n(1≦n≦20) と，商品の部分集合を表す 10 進整数
# X(0≦X≦2n−1) が空白区切りで与えられる．
# 2 行目には，商品 0 ～ n−1 の商品の価格 a0​,a1​,...,an−1​(0≦a0​,a1​,...,an−1​≦1,000) が順番に空白区切りで与えられる．

# 出力
# 部分集合に含まれる商品の価格を合計したものを 1 行に出力せよ．出力の末尾に改行をいれること．

n, x = gets.chomp.split(' ').map(&:to_i)
prices = gets.chomp.split(' ').map(&:to_i)
answer = 0
n.times do |i|
  answer += prices[i] if (x >> i) & 1 == 1
end

puts answer
